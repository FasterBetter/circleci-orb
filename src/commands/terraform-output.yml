description: "Run `terraform output` and export string, number, and boolean outputs to TF_OUT_UPPER_CAMEL_CASE_OUTPUT_NAME env vars."

parameters:
  path:
    type: "string"
    description: "Path to the terraform module"
    default: "."

  workspace:
    type: string
    description: Name of the terraform workspace
    default: ""

  persist_to_workspace:
    type: boolean
    default: false
    description: "If true will persist outputs ready for $BASH_ENV into /tmp/teak-orb-terraform/outputs.txt"

steps:
  - run:
      name: Terraform Output
      command: |
        readonly module_path="<< parameters.path >>"
        if [[ ! -d "$module_path" ]]; then
          echo "Path does not exist: \"$module_path\""
          exit 1
        fi

        readonly workspace_parameter="<< parameters.workspace >>"
        readonly workspace="${TF_WORKSPACE:-$workspace_parameter}"
        export workspace
        unset TF_WORKSPACE

        if [[ $workspace_parameter != "" ]]; then
          echo "[INFO] Provisioning workspace: $workspace"
          ~/terraform/terraform -chdir="$module_path" workspace select -no-color "$workspace" || ~/terraform/terraform -chdir="$module_path" workspace new -no-color "$workspace"
        else
          echo "[INFO] Using default workspace"
        fi

        mkdir -p /tmp/teak-orb-terraform

        ~/terraform/terraform -chdir="$module_path" output -json \
          | jq -r 'to_entries | map({key: .key | gsub("-"; "_") | ascii_upcase, value: .value.value, type: .value.value | type})
            | map(select(.type == "string" or .type == "number" or .type == "boolean"))
            | map("export TF_OUT_\(.key)=\(.value)")
            | join("\n")' > /tmp/teak-orb-terraform/outputs.txt

        cat /tmp/teak-orb-terraform/outputs.txt >> $BASH_ENV
  - when:
      condition: << parameters.persist_to_workspace >>
      steps:
        - persist_to_workspace:
            root: /tmp/teak-orb-terraform
            paths:
              - outputs.txt
