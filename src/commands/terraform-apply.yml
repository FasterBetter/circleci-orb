description: "Run `terraform apply`."

parameters:
  plan:
    type: string
    default: "teak-orb-terraform.plan"

  out_log:
    type: string
    default: "teak-orb-terraform.apply.log"

  plan_path:
    type: string
    default: "/tmp/teak-orb-terraform"

  dry_run:
    type: boolean
    default: false

  workspace:
    type: string
    description: Name of the terraform workspace
    default: ""

  path:
    type: "string"
    description: "Path to the terraform module"
    default: "."

steps:
  - run:
      name: Prepare attach_workspace
      command: mkdir -p << parameters.path >>
  - attach_workspace:
      at: << parameters.plan_path >>
  - unless:
      condition: << parameters.dry_run >>
      steps:
        - run:
            name: Terraform Apply
            command: |
              readonly module_path="<< parameters.path >>"
              if [[ ! -d "$module_path" ]]; then
                echo "Path does not exist: \"$module_path\""
                exit 1
              fi

              readonly workspace_parameter="<< parameters.workspace >>"
              readonly workspace="${TF_WORKSPACE:-$workspace_parameter}"
              export workspace
              unset TF_WORKSPACE

              if [[ $workspace_parameter != "" ]]; then
                echo "[INFO] Provisioning workspace: $workspace"
                ~/terraform/terraform -chdir="$module_path" workspace select -no-color "$workspace" || terraform -chdir="$module_path" workspace new -no-color "$workspace"
              else
                echo "[INFO] Using default workspace"
              fi

              ~/terraform/terraform -chdir="$module_path" apply -auto-approve << parameters.plan_path >>/<< parameters.plan >> | tee << parameters.out_log >>
        - store_artifacts:
            path: << parameters.out_log >>
  - when:
      condition: << parameters.dry_run >>
      steps:
        - run:
            name: Terraform Apply (Dry Run)
            command: |
              ~/terraform/terraform show << parameters.plan_path >>/<< parameters.plan >> | tee << parameters.out_log >>
        - store_artifacts:
            path: << parameters.out_log >>
