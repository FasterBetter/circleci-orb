description: "Run `terraform apply`."

parameters:
  version:
    description: "Version of terraform to use"
    type: string
    default: "1.0.5"

  platform:
    description: "Platform terraform will run on"
    type: string
    default: "linux_amd64"

  github_releases_user:
    type: string
    default: ""
    description: >
      If set, instead of downloading from releases.hashicorp.com, will
      download from a Github release for the specified user

  gpg_key_id:
    type: string
    default: "72D7468F"
    description: The fingerprint of the GPG key used to sign the release.

  gpg_keyserver:
    type: string
    default: "keyserver.ubuntu.com"
    description: "The keyserver to retrieve the GPG key from"

  path:
    type: "string"
    description: "Path to the terraform module"
    default: "."

  workspace:
    type: "string"
    description: Name of the terraform workspace
    default: ""

  plan:
    type: string
    default: "teak-orb-terraform.tfplan"
    description: "The name of the planfile to apply."

  plan_path:
    type: string
    description: "Path the planfile is stored in. Should be persisted from a terraform-plan job or command."
    default: "/tmp/teak-orb-terraform"

  out_log:
    type: string
    default: "teak-orb-terraform.apply.log"
    description: "Name of the file the apply log should be stored in."

  dry_run:
    type: boolean
    default: false
    description: "When true will show what apply would have done, but will not run apply."

  continuation_cache:
    type: "string"
    description: "The cache key the plan was stored in for continuations (https://circleci.com/developer/orbs/orb/circleci/continuation)"
    default: ""

  include_output:
    type: boolean
    default: false
    description: "Run `terraform output` and export string, number, and boolean outputs to TF_OUT_UPPER_CAMEL_CASE_OUTPUT_NAME env vars and to plan_path/output.txt ready to cat into $BASH_ENV"

  use_circle_workspace:
    type: boolean
    default: true
    description: "Use plan_path as a circleci workspace."

  before_apply_steps:
    type: steps
    description: "Steps to execute prior to running terraform apply, but after terraform init."
    default: []

  cache_version:
    type: "string"
    description: "Change me to blow away caches"
    default: "v2"

steps:
  - terraform-install:
      version: << parameters.version >>
      platform: << parameters.platform >>
      github_releases_user: << parameters.github_releases_user >>
      gpg_key_id: << parameters.gpg_key_id >>
      gpg_keyserver: << parameters.gpg_keyserver >>
  - terraform-init:
      path: << parameters.path >>
      cache_version: << parameters.cache_version >>
  - when:
      condition: << parameters.continuation_cache >>
      steps:
        - run:
            name: "Ensure directory structure exists"
            command: mkdir -p /tmp/teak-orb-terraform
        - restore_cache:
            key: << parameters.continuation_cache >>
  - when:
      condition: << parameters.use_circle_workspace >>
      steps:
        - run:
            name: Prepare attach_workspace
            command: mkdir -p << parameters.path >>
        - attach_workspace:
            at: << parameters.plan_path >>
  - run:
      name: "Set terraform workspace"
      environment:
        workspace_parameter: << parameters.workspace >>
        module_path: << parameters.path >>
      command: << include(scripts/workspace.sh) >>
  - when:
      condition: << parameters.before_apply_steps >>
      steps: << parameters.before_apply_steps >>
  - unless:
      condition: << parameters.dry_run >>
      steps:
        - run:
            name: Terraform Apply
            environment:
              module_path: << parameters.path >>
            command: |
              ~/terraform/terraform -chdir="$module_path" apply -no-color << parameters.plan_path >>/<< parameters.plan >> | tee << parameters.out_log >>
        - when:
            condition: << parameters.include_output >>
            steps:
              - run:
                  name: "Terraform output"
                  environment:
                    module_path: << parameters.path >>
                    PLAN_PATH: << parameters.plan_path >>
                  command: << include(scripts/output.sh) >>
        - store_artifacts:
            path: << parameters.out_log >>
        - when:
            condition: << parameters.use_circle_workspace >>
            steps:
              - persist_to_workspace:
                  root: << parameters.plan_path >>
                  paths:
                    - "*"
  - when:
      condition: << parameters.dry_run >>
      steps:
        - run:
            name: Terraform Apply (Dry Run)
            command: |
              ~/terraform/terraform show << parameters.plan_path >>/<< parameters.plan >> | tee << parameters.out_log >>
        - store_artifacts:
            path: << parameters.out_log >>
