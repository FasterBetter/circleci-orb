description: "Run `terraform plan`."

parameters:
  out_plan:
    type: string
    default: "teak-orb-terraform.tfplan"

  out_log:
    type: string
    default: "teak-orb-terraform.plan.log"

  out_path:
    type: string
    default: "/tmp/teak-orb-terraform"

  workspace:
    type: string
    description: Name of the terraform workspace
    default: ""

  path:
    type: "string"
    description: "Path to the terraform module"
    default: "."

  var:
    default: ''
    description: "Comma separated list of vars to set, e.g. 'foo=bar,baz=boo'"
    type: string

  continuation:
    type: boolean
    description: "Prepares a continue_params.json file for use with https://circleci.com/developer/orbs/orb/circleci/continuation."
    default: false

  continuation_parameters:
    default: ''
    description: "Comma separated list of additional parameters to set for the continued pipeline e.g. 'foo=bar,baz=boo'"
    type: string

  var_file:
    default: ''
    description: "Comma separated list of var_files to load to set, e.g. 'dev.tfvars'"
    type: string

steps:
  - run:
      name: Terraform Plan
      command: |
        readonly module_path="<< parameters.path >>"
        if [[ ! -d "$module_path" ]]; then
          echo "Path does not exist: \"$module_path\""
          exit 1
        fi

        readonly workspace_parameter="<< parameters.workspace >>"
        readonly workspace="${TF_WORKSPACE:-$workspace_parameter}"
        export workspace
        unset TF_WORKSPACE

        if [[ $workspace_parameter != "" ]]; then
          echo "[INFO] Provisioning workspace: $workspace"
          ~/terraform/terraform -chdir="$module_path" workspace select -no-color "$workspace" || ~/terraform/terraform -chdir="$module_path" workspace new -no-color "$workspace"
        else
          echo "[INFO] Using default workspace"
        fi

        PLAN_ARGS="-no-color -detailed-exitcode"
        if [[ -n "<< parameters.var >>" ]]; then
          for var in $(echo "<< parameters.var >>" | tr ',' '\n'); do
            PLAN_ARGS="$PLAN_ARGS -var $var"
          done
        fi

        if [[ -n "<< parameters.var_file >>" ]]; then
          for var in $(echo "<< parameters.var_file >>" | tr ',' '\n'); do
            PLAN_ARGS="$PLAN_ARGS -var-file $var"
          done
        fi

        mkdir -p << parameters.out_path >>
        set +e
        ~/terraform/terraform -chdir="$module_path" plan $PLAN_ARGS -out=<< parameters.out_path >>/<< parameters.out_plan >> | tee << parameters.out_path >>/<< parameters.out_log >>
        plan_retval=$?
        set -e
        if [ $plan_retval -eq 1 ]; then
          exit 1
        fi
        if [ $plan_retval -eq 2 ]; then
          touch << parameters.out_path >>/tf_plan_changes
        fi
  - when:
      condition: << parameters.continuation >>
      steps:
        - run:
            name: "Generate continue_params"
            command: |
              CONTINUE_PARAMS=""
              if [ -f << parameters.out_path >>/tf_plan_changes ]; then
                CONTINUE_PARAMS="{\"run-apply\":true, \"continuation-cache-id\": \"${CIRCLE_WORKFLOW_ID}\", \"workspace\":\"<< parameters.workspace >>\", \"plan-log-url\":\"${CIRCLE_BUILD_URL}/artifacts/${CIRCLE_NODE_INDEX}<< parameters.out_path >>/<< parameters.out_log >>\"}"
              else
                CONTINUE_PARAMS="{}"
              fi

              if [[ -n "<< parameters.continuation_parameters >>" ]]; then
                for var in $(echo "<< parameters.continuation_parameters >>" | tr ',' '\n'); do
                  IFS='=' read key value \<<< $var
                  CONTINUE_PARAMS=$(echo "$CONTINUE_PARAMS" | jq --arg key "$key" --arg val "$value" '. + {($key): $val}')
                done
              fi

              echo "$CONTINUE_PARAMS" > << parameters.out_path >>/continue_params.json
        - save_cache:
            key: "{{ .Environment.CIRCLE_WORKFLOW_ID }}"
            paths:
              - << parameters.out_path >>/<< parameters.out_plan >>
  - store_artifacts:
      path: << parameters.out_path >>/<< parameters.out_plan >>
  - store_artifacts:
      path: << parameters.out_path >>/<< parameters.out_log >>
