description: "Run `terraform plan`."

parameters:
  out_plan:
    type: string
    default: "teak-orb-terraform.plan"

  out_log:
    type: string
    default: "teak-orb-terraform.plan.log"

  out_path:
    type: string
    default: "/tmp/teak-orb-terraform"

  workspace:
    type: string
    description: Name of the terraform workspace
    default: ""

  path:
    type: "string"
    description: "Path to the terraform module"
    default: "."

steps:
  - run:
      name: Terraform Plan
      command: |
        readonly module_path="<< parameters.path >>"
        if [[ ! -d "$module_path" ]]; then
          echo "Path does not exist: \"$module_path\""
          exit 1
        fi

        readonly workspace_parameter="<< parameters.workspace >>"
        readonly workspace="${TF_WORKSPACE:-$workspace_parameter}"
        export workspace
        unset TF_WORKSPACE

        if [[ $workspace_parameter != "" ]]; then
          echo "[INFO] Provisioning workspace: $workspace"
          ~/terraform/terraform -chdir="$module_path" workspace select -no-color "$workspace" || ~/terraform/terraform -chdir="$module_path" workspace new -no-color "$workspace"
        else
          echo "[INFO] Using default workspace"
        fi

        mkdir -p << parameters.out_path >>
        ~/terraform/terraform -chdir="$module_path" plan -no-color -out=<< parameters.out_path >>/<< parameters.out_plan >> | tee << parameters.out_path >>/<< parameters.out_log >>
  - persist_to_workspace:
      root: << parameters.out_path >>
      paths:
        - << parameters.out_plan >>
        - << parameters.out_log >>
  - store_artifacts:
      path: << parameters.out_path >>/<< parameters.out_plan >>
  - store_artifacts:
      path: << parameters.out_path >>/<< parameters.out_log >>
