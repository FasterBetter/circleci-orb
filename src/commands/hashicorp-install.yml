description: "Prepare a specified version of a hashicorp tool for use."

parameters:
  tool:
    type: enum
    enum: ["terraform", "packer"]
    description: "The hashicorp tool which should be installed"

  version:
    type: string
    description: "The version of the tool to install"

  platform:
    type: string
    default: "linux_amd64"
    description: "The platform the tool will be run on"

  github_releases_user:
    type: string
    default: ""
    description: >
      If set, instead of downloading from releases.hashicorp.com, will
      download from a Github release for the specified user

  gpg_key_id:
    type: string
    default: "72D7468F"
    description: The fingerprint of the GPG key used to sign the release.

  gpg_keyserver:
    type: string
    default: "keyserver.ubuntu.com"
    description: "The keyserver to retrieve the GPG key from"

steps:
  - restore_cache:
      key: teak-orb-hashicorp-install-<< parameters.tool >>-<< parameters.version >>
  - run:
      name: Import signing key
      command: |
        gpg --keyserver << parameters.gpg_keyserver >> --recv << parameters.gpg_key_id >>
  - run:
      name: Install or Upgrade << parameters.tool >>
      command: |
        if [ ! -f ~/<< parameters.tool >>/<< parameters.tool >> ] || [ `~/<< parameters.tool >>/<< parameters.tool >> version | grep -i -o '<< parameters.tool >> v[0-9]*\.[0-9]*\.[0-9]*' | sed 's/<< parameters.tool >> v//i'` != << parameters.version >> ]; then

          base_url="https://releases.hashicorp.com/<< parameters.tool >>/<< parameters.version >>"
          if [ -n "<< parameters.github_releases_user >>" ] ; then
            echo "Using Github releases from << parameters.github_releases_user >>"
            base_url="https://github.com/<< parameters.github_releases_user >>/<< parameters.tool >>/releases/download/v<< parameters.version >>"
          fi

          wget "$base_url/<< parameters.tool >>_<< parameters.version >>_<< parameters.platform >>.zip"
          wget "$base_url/<< parameters.tool >>_<< parameters.version >>_SHA256SUMS"
          wget "$base_url/<< parameters.tool >>_<< parameters.version >>_SHA256SUMS.sig"

          echo "Validating signatures..."
          if ! gpg --batch --verify << parameters.tool >>_<< parameters.version >>_SHA256SUMS.sig << parameters.tool >>_<< parameters.version >>_SHA256SUMS ; then
            echo "SHA256SUMS file not signed?"
            exit 1
          fi

          # Validate checksum
          expected_sha=$(cat << parameters.tool >>_<< parameters.version >>_SHA256SUMS | grep "<< parameters.tool >>_<< parameters.version >>_<< parameters.platform >>.zip" | awk '{print $1}')
          download_sha=$(shasum -a 256 "<< parameters.tool >>_<< parameters.version >>_<< parameters.platform >>.zip" | cut -d' ' -f1)
          echo "Validating download..."
          if [ $expected_sha != $download_sha ]; then
            echo "Expected SHA256SUM does not match downloaded file, exiting."
            exit 1
          fi

          unzip -o << parameters.tool >>_<< parameters.version >>_<< parameters.platform >>.zip -d ~/<< parameters.tool >>
        fi
  - save_cache:
      key: teak-orb-hashicorp-install-<< parameters.tool >>-<< parameters.version >>
      paths:
        - ~/<< parameters.tool >>
